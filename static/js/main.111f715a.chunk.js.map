{"version":3,"sources":["API.js","CopyButton.js","Item.js","App.js","TypeButton.js","index.js"],"names":["getNewNumber","params","a","apikey","app","country","Promise","resolve","reject","fetch","then","res","ok","json","result","console","log","getAllNumber","error","getMessage","number","getMoney","balance","CopyButton","props","state","isCopy","children","this","style","color","className","onClick","setState","onCopied","navigator","clipboard","writeText","Component","Item","refreshTime","isRefresh","time","item","message","callback","clearInterval","getMessageInterval","onClickGetMessage","setInterval","timestamp","country_name","app_name","React","App","sound","Audio","inputEmail","urlParams","URLSearchParams","window","location","search","address1","address2","address3","allNumber","isLoading","timeGetNumber","isGetNumber","lastErrorMessage","money","email","emailCount","showCopy","setErrorMessage","err","status","statusText","playSound","pause","currentTime","play","refresh","getNumberInterval","onClickGetNewNumber","setParams","key","value","set","replaceParams","newParams","toString","newURL","origin","pathname","replace","onCopy","copyText","clearTimeout","copyTimeout","setTimeout","get","parseInt","opacity","href","reload","length","map","onChange","e","target","marginLeft","padStart","newEmailCount","marginTop","display","cursor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.111f715a.chunk.js","sourcesContent":["export const getNewNumber = async (params) => {\r\n    const { apikey, app, country } = params;\r\n    return new Promise((resolve, reject) => {\r\n        fetch(\r\n            `http://api.smspincode.com/user/api/get_number.php?customer=${apikey}&app=${app}&country=${country}`\r\n        ).then(async (res) => {\r\n            if (res.ok) {\r\n                const result = await res.json();\r\n                console.log(result);\r\n                if (result) {\r\n                    resolve(res);\r\n                }\r\n            }\r\n            reject(res);\r\n        });\r\n    });\r\n};\r\n\r\nexport const getAllNumber = async (params) => {\r\n    const { apikey } = params;\r\n    return new Promise((resolve, reject) => {\r\n        fetch(`http://api.smspincode.com/user/api/get_history.php?customer=${apikey}`)\r\n            .then((res) => res.json())\r\n            .then(\r\n                (result) => {\r\n                    resolve(result);\r\n                },\r\n                (error) => {\r\n                    console.log(error);\r\n                    reject(error);\r\n                }\r\n            );\r\n    });\r\n};\r\n\r\nexport const getMessage = async (params, number) => {\r\n    const { apikey, app, country } = params;\r\n    return new Promise((resolve, reject) => {\r\n        fetch(\r\n            `http://api.smspincode.com/user/api/get_sms.php?customer=${apikey}&number=${number}&app=${app}&country=${country}`\r\n        ).then(async (res) => {\r\n            try {\r\n                if (res && res.ok) {\r\n                    const result = await res.json();\r\n                    if (result) {\r\n                        console.log(result);\r\n                        resolve(result);\r\n                    }\r\n                }\r\n                reject('');\r\n            } catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\nexport const getMoney = async (params, number) => {\r\n    const { apikey } = params;\r\n    return new Promise((resolve, reject) => {\r\n        fetch(`https://api.smspincode.com/user/api/get_balance.php?customer=${apikey}`).then(async (res) => {\r\n            if (res.ok) {\r\n                const result = await res.json();\r\n                if (result) {\r\n                    resolve(result.balance);\r\n                }\r\n                resolve();\r\n            }\r\n            reject(res);\r\n        });\r\n    });\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nclass CopyButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { isCopy: false };\r\n    }\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n        const { isCopy } = this.state;\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{ color: isCopy ? 'green' : '' }}\r\n                    className={'copyButton'}\r\n                    onClick={() => {\r\n                        this.setState({ isCopy: true });\r\n                        if (this.props.onCopied) {\r\n                            this.props.onCopied(children);\r\n                        }\r\n                        navigator.clipboard.writeText(children);\r\n                    }}\r\n                >\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CopyButton;\r\n","import React from 'react';\r\nimport CopyButton from './CopyButton';\r\n\r\nclass Item extends React.Component {\r\n    getMessageInterval;\r\n    refreshTime = 3000;\r\n    state = { isRefresh: false, time: 3 };\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.getMessageInterval);\r\n    }\r\n\r\n    getMessage = async (number) => {\r\n        const { item } = this.props;\r\n        try {\r\n            await this.props.getMessage(number, item.message, this.callback);\r\n        } catch (err) {\r\n            console.log('err on item', err);\r\n        }\r\n    };\r\n\r\n    callback = () => {\r\n        clearInterval(this.getMessageInterval);\r\n        this.setState({ isRefresh: false });\r\n    };\r\n\r\n    onClickGetMessage = async (number) => {\r\n        const { isRefresh } = this.state;\r\n        this.setState({ isRefresh: !isRefresh });\r\n\r\n        if (isRefresh) {\r\n            clearInterval(this.getMessageInterval);\r\n        } else {\r\n            this.getMessage(number);\r\n            this.getMessageInterval = setInterval(async () => {\r\n                const { time } = this.state;\r\n                if (time === 0) {\r\n                    this.setState({ time: 3 });\r\n                } else {\r\n                    this.setState({ time: time - 1 });\r\n                    if (time === 1) {\r\n                        this.getMessage(number);\r\n                    }\r\n                }\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { isRefresh, time } = this.state;\r\n        const { item } = this.props;\r\n        return (\r\n            <tr>\r\n                <td>\r\n                    <div className=\"getButton\">\r\n                        <button\r\n                            className=\"getButton\"\r\n                            onClick={() => {\r\n                                this.onClickGetMessage(item.number);\r\n                            }}\r\n                        >\r\n                            {isRefresh ? 'Get:' + time : 'Get'}\r\n                        </button>\r\n                    </div>\r\n                </td>\r\n\r\n                <td>\r\n                    <CopyButton>{`+${item.number}`}</CopyButton>\r\n                </td>\r\n                <td className=\"itemCode\">\r\n                    <div>{item.message}</div>\r\n                </td>\r\n                <td>\r\n                    <div>{item.timestamp}</div>\r\n                </td>\r\n                <td>\r\n                    <div>{item.country_name}</div>\r\n                </td>\r\n                <td>\r\n                    <div>{item.app_name}</div>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;\r\n","import React from 'react';\nimport { getNewNumber, getAllNumber, getMessage, getMoney } from './API';\nimport './App.css';\nimport Item from './Item';\nimport CopyButton from './CopyButton';\nimport TypeButton from './TypeButton';\n\nclass App extends React.Component {\n    getNumberInterval;\n    sound = new Audio('https://smspincode.com/user/plucky.mp3');\n    inputEmail = '';\n    urlParams = new URLSearchParams(window.location.search);\n    copyTimeout;\n\n    state = {\n        params: {\n            apikey: '',\n            app: '',\n            country: '',\n            address1: '',\n            address2: '',\n            address3: '',\n        },\n        allNumber: [],\n        isLoading: true,\n        timeGetNumber: 5,\n        isGetNumber: false,\n        lastErrorMessage: '',\n        money: '',\n        email: '',\n        emailCount: 0,\n        showCopy: false,\n    };\n\n    async componentDidMount() {\n        const urlParams = this.urlParams;\n        const email = urlParams.get('email') || 'ilovegrab';\n        const emailCount = parseInt(urlParams.get('emailCount')) || 0;\n        const apikey = urlParams.get('key');\n        const app = urlParams.get('app') || 'foodpanda';\n        const country = urlParams.get('country') || 'thailand';\n        const address1 = urlParams.get('address1');\n        const address2 = urlParams.get('address2');\n        const address3 = urlParams.get('address3');\n        const params = { apikey, app, country, address1, address2, address3 };\n\n        const money = await getMoney(params);\n\n        await this.setState({ params, money, email, emailCount });\n        await this.refresh();\n    }\n\n    setErrorMessage = (err) => {\n        const error = err.status + ' : ' + err.statusText;\n        this.setState({ lastErrorMessage: error });\n    };\n\n    playSound = () => {\n        this.sound.pause();\n        this.sound.currentTime = 0;\n        this.sound.play();\n    };\n\n    refresh = async () => {\n        console.log('refresh');\n        try {\n            const { params } = this.state;\n\n            this.setState({ isLoading: true });\n            const allNumber = await getAllNumber(params);\n            this.setState({ allNumber });\n        } catch (err) {\n            this.setErrorMessage(err);\n        }\n        this.setState({ isLoading: false });\n    };\n\n    getNewNumber = async () => {\n        try {\n            const { params } = this.state;\n            const result = await getNewNumber(params);\n\n            if (result) {\n                this.setState({ isGetNumber: false });\n                clearInterval(this.getNumberInterval);\n                this.refresh();\n                this.playSound();\n            }\n        } catch (err) {\n            this.setErrorMessage(err);\n        }\n    };\n\n    getMessage = async (number, message, callback) => {\n        try {\n            const { params } = this.state;\n            await getMessage(params, number);\n        } catch (err) {\n            console.log('err on App');\n            this.setErrorMessage(err);\n        }\n        await this.refresh();\n        if (message) {\n            callback();\n            this.playSound();\n        }\n    };\n\n    onClickGetNewNumber = async () => {\n        const { isGetNumber } = this.state;\n        if (isGetNumber) {\n            clearInterval(this.getNumberInterval);\n        } else {\n            this.getNewNumber();\n            this.getNumberInterval = setInterval(async () => {\n                const { timeGetNumber } = this.state;\n                if (timeGetNumber === 0) {\n                    this.setState({ timeGetNumber: 5 });\n                } else {\n                    this.setState({ timeGetNumber: timeGetNumber - 1 });\n                    if (timeGetNumber === 1) {\n                        this.getNewNumber();\n                    }\n                }\n            }, 1000);\n        }\n        this.setState({ isGetNumber: !isGetNumber });\n    };\n\n    setParams = (key, value) => {\n        this.urlParams.set(key, value);\n    };\n\n    replaceParams = () => {\n        const newParams = this.urlParams.toString();\n        const newURL = window.location.origin + window.location.pathname + '?' + newParams;\n        window.location.replace(newURL);\n    };\n\n    onCopy = async (copyText) => {\n        clearTimeout(this.copyTimeout);\n        this.setState({ showCopy: true, copyText });\n        this.copyTimeout = setTimeout(() => {\n            this.setState({ showCopy: false });\n        }, 1000);\n    };\n\n    render() {\n        const {\n            allNumber,\n            isLoading,\n            isGetNumber,\n            timeGetNumber,\n            params,\n            lastErrorMessage,\n            money,\n            email,\n            emailCount,\n            showCopy,\n            copyText,\n        } = this.state;\n        const { apikey, app, country, address1, address2, address3 } = params;\n\n        return (\n            <div className=\"App\">\n                <div style={{ opacity: showCopy ? 1 : 0 }} className=\"copyBox\">\n                    Copy : {copyText}\n                </div>\n                <div className=\"headerContainer\">\n                    <div className=\"leftHeader\">\n                        <div>\n                            {/* <TypeButton params={params} type=\"app\">\n                                foodpanda\n                            </TypeButton> */}\n                        </div>\n                    </div>\n\n                    <div className=\"middleHeader\">\n                        <div className=\"title\">BooKy SMS Pincode</div>\n                        <div className=\"subTitle\">\n                            <div>\n                                Key :{' '}\n                                {apikey ? (\n                                    apikey\n                                ) : (\n                                    <span>\n                                        {'ไปใส่ APIKey ด้วย -> '}\n                                        <a href=\"https://smspincode.com/user/settings.php\">\n                                            https://smspincode.com/user/settings.php\n                                        </a>\n                                    </span>\n                                )}\n                            </div>\n                            <div>\n                                {app} : {country}\n                            </div>\n                            <div className=\"greenText\">Money : {money}$</div>\n                        </div>\n                        {/* <Input label=\"API Key\" /> */}\n                        <button onClick={this.onClickGetNewNumber}>\n                            Get Number{isGetNumber && ':' + timeGetNumber}\n                        </button>\n                        <button className=\"refreshButton\" onClick={this.refresh}>\n                            Refresh\n                        </button>\n                        <button\n                            className=\"refreshButton\"\n                            onClick={() => {\n                                window.location.reload();\n                            }}\n                        >\n                            Stop all\n                        </button>\n                        <span className=\"loading\">{isLoading && 'Loading...'}</span>\n                        {lastErrorMessage && <div className=\"errorMessage\">Last Error : {lastErrorMessage}</div>}\n                    </div>\n\n                    <div className=\"rightHeader\"></div>\n                </div>\n\n                <div className=\"table\">\n                    <table>\n                        <tbody>\n                            <tr>\n                                <td className=\"headTableButton\"></td>\n                                <td className=\"headTable\">Number</td>\n                                <td className=\"headTableCode\">Code</td>\n                                <td className=\"headTable\">Time</td>\n                                <td className=\"headTable\">Country</td>\n                                <td className=\"headTable\">App</td>\n                            </tr>\n                            {allNumber.length > 0 &&\n                                allNumber.map((item) => (\n                                    <Item key={item.timestamp} item={item} getMessage={this.getMessage} />\n                                ))}\n                        </tbody>\n                    </table>\n                </div>\n\n                <div className=\"howto\">\n                    <div className=\"howtoTitle\">ข้อมูล {'(กดเพื่อคัดลอก)'}</div>\n                    <CopyButton onCopied={this.onCopy}>\n                        {address1 || '19 Lat Phrao 1 Alley, Lane 8 Khwaeng Chom Phon Krung Thep Maha Nakhon 10900'}\n                    </CopyButton>\n                    <CopyButton onCopied={this.onCopy}>{address2 || 'สมคิดแมนชั่น ตึกสีเทา'}</CopyButton>\n                    <CopyButton onCopied={this.onCopy}>\n                        {address3 ||\n                            'ลาดพร้ว ซ.1 แยก 8 เกือบสุดซอย หน้าตึกเขียนว่าสมคิดแมนชั่น ถึงแล้วโทรมาเบอร์นี้ 0884015974 ครับ'}\n                    </CopyButton>\n                </div>\n\n                <div className=\"howto\">\n                    <div className=\"howtoTitle\">โค๊ดส่วนลด</div>\n                    <CopyButton onCopied={this.onCopy}>HOORAY100</CopyButton>\n                    <CopyButton onCopied={this.onCopy}>FPDSS100</CopyButton>\n                    <CopyButton onCopied={this.onCopy}>NEWGRAB</CopyButton>\n                    <CopyButton onCopied={this.onCopy}>OMG80</CopyButton>\n                    <CopyButton onCopied={this.onCopy}>HALF100</CopyButton>\n                    <CopyButton onCopied={this.onCopy}>GBNEW</CopyButton>\n                </div>\n\n                <div className=\"howto\">\n                    <div className=\"howtoTitle\">Account</div>\n                    <input\n                        onChange={(e) => {\n                            this.setState({ email: e.target.value });\n                        }}\n                    />\n                    <span style={{ marginLeft: '3px' }}>@gmail.com</span>\n                    <button\n                        style={{ marginLeft: '6px' }}\n                        onClick={() => {\n                            this.setParams('email', email);\n                            this.setParams('emailCount', 0);\n                            this.replaceParams();\n                            this.setState({ emailCount: 0, email });\n                        }}\n                    >\n                        save\n                    </button>\n                    <div>\n                        <div className={'emailCount'}>\n                            <CopyButton onCopied={this.onCopy}>\n                                {email}\n                                {emailCount.toString().padStart(3, '0')}@gmail.com\n                            </CopyButton>\n                            <button\n                                className={'countButton'}\n                                onClick={() => {\n                                    let newEmailCount = emailCount + 1;\n                                    this.setParams('emailCount', newEmailCount);\n                                    this.replaceParams();\n                                    this.setState({ emailCount: newEmailCount });\n                                }}\n                            >\n                                +\n                            </button>\n                        </div>\n                    </div>\n                    <CopyButton onCopied={this.onCopy}>Ilove</CopyButton>\n                    <CopyButton onCopied={this.onCopy}>Foodpanda</CopyButton>\n                    <CopyButton onCopied={this.onCopy}>13171317</CopyButton>\n                </div>\n\n                <div className=\"howto\">\n                    <div className=\"howtoTitle\">วิธีใช้ ใส่ลิงค์ตามนี้</div>\n                    <div className=\"example\">\n                        https://book1317.github.io/react-sms-pincode-auto-refresh?key=\n                        <span className=\"redText\">{'{APIkey}'}</span>\n                        {'&'}app=<span className=\"redText\">{'{app}'}</span>\n                        {'&'}country=<span className=\"redText\">{'{country}'}</span>\n                        {'&'}address1=<span className=\"redText\">{'{address1}'}</span>\n                        {'&'}address2=<span className=\"redText\">{'{address2}'}</span>\n                        {'&'}address3=<span className=\"redText\">{'{address3}'}</span>\n                    </div>\n                    <div>\n                        <span className=\"redText\">APIkey</span> = 1101600d8fa7e22bxxxxxxxxxxxxxxxxxxxxxxxxx\n                        {' (required)'} from{' '}\n                        <a href=\"https://smspincode.com/user/settings.php\">https://smspincode.com/user/settings.php</a>{' '}\n                    </div>\n                    <div>\n                        <span className=\"redText\">app</span> = foodpanda {'(defualt)'}\n                    </div>\n                    <div>\n                        <span className=\"redText\">country</span> = thailand {'(defualt)'}\n                    </div>\n                    <div>\n                        <span className=\"redText\">address1</span>\n                    </div>\n                    <div>\n                        <span className=\"redText\">address2</span>\n                    </div>\n                    <div>\n                        <span className=\"redText\">address3</span>\n                    </div>\n\n                    <a\n                        style={{ marginTop: '10px', display: 'block', cursor: 'pointer' }}\n                        href=\"https://www.foodpanda.co.th/contents/deals\"\n                    >\n                        https://www.foodpanda.co.th/contents/deals\n                    </a>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\n\r\nclass TypeButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { isSelect: false };\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    render() {\r\n        const { params, children, type } = this.props;\r\n        const isSelect = type === 'app' ? params.app === children : params.country === children;\r\n        return (\r\n            <div>\r\n                <button style={{ backgroundColor: isSelect ? 'green' : '' }} className=\"typeButton\" onClick={() => {}}>\r\n                    {children}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TypeButton;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}